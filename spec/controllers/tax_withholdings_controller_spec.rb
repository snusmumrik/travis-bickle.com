require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe TaxWithholdingsController do

  # This should return the minimal set of attributes required to create a valid
  # TaxWithholding. As you add validations to TaxWithholding, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    if controller.current_user
      driver = controller.current_user.drivers.last
      FactoryGirl.attributes_for(:tax_withholding, :driver_id => driver.id)
    else
      driver = FactoryGirl.create(:driver)
      FactoryGirl.attributes_for(:tax_withholding, :driver_id => driver.id)
    end
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TaxWithholdingsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  context "authenticated user" do
    signin_user

    describe "GET index" do
      it "assigns all tax_withholdings as @tax_withholdings" do
        tax_withholdings = TaxWithholding.includes(:driver => :user).where(["users.id = ?", controller.current_user.id]).all
        get :index, {}
        # assigns(:tax_withholdings).should eq(tax_withholdings)
        redirect_to root_path
      end
    end

    describe "GET show" do
      it "assigns the requested tax_withholding as @tax_withholding" do
        tax_withholding = TaxWithholding.create! valid_attributes
        get :show, {:id => tax_withholding.to_param}
        assigns(:tax_withholding).should eq(tax_withholding)
      end
    end

    describe "GET new" do
      it "assigns a new tax_withholding as @tax_withholding" do
        get :new, {:driver_id => 1}
        assigns(:tax_withholding).should be_a_new(TaxWithholding)
      end
    end

    describe "GET edit" do
      it "assigns the requested tax_withholding as @tax_withholding" do
        tax_withholding = TaxWithholding.create! valid_attributes
        get :edit, {:id => tax_withholding.to_param}
        assigns(:tax_withholding).should eq(tax_withholding)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new TaxWithholding" do
          expect {
            post :create, {:tax_withholding => valid_attributes}
          }.to change(TaxWithholding, :count).by(1)
        end

        it "assigns a newly created tax_withholding as @tax_withholding" do
          post :create, {:tax_withholding => valid_attributes}
          assigns(:tax_withholding).should be_a(TaxWithholding)
          assigns(:tax_withholding).should be_persisted
        end

        it "redirects to the tax_withholdings" do
          post :create, {:tax_withholding => valid_attributes}
          response.should redirect_to "#{tax_withholdings_path}/#{TaxWithholding.last.driver_id}/#{TaxWithholding.last.date.year}"
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved tax_withholding as @tax_withholding" do
          # Trigger the behavior that occurs when invalid params are submitted
          TaxWithholding.any_instance.stub(:save).and_return(false)
          post :create, {:tax_withholding => {:driver_id => FactoryGirl.create(:driver).id}}
          assigns(:tax_withholding).should be_a_new(TaxWithholding)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          TaxWithholding.any_instance.stub(:save).and_return(false)
          post :create, {:tax_withholding => {:driver_id => FactoryGirl.create(:driver).id}}
          response.should render_template("new")
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        it "updates the requested tax_withholding" do
          tax_withholding = TaxWithholding.create! valid_attributes
          # Assuming there are no other tax_withholdings in the database, this
          # specifies that the TaxWithholding created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          TaxWithholding.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
          put :update, {:id => tax_withholding.to_param, :tax_withholding => {'these' => 'params'}}
        end

        it "assigns the requested tax_withholding as @tax_withholding" do
          tax_withholding = TaxWithholding.create! valid_attributes
          put :update, {:id => tax_withholding.to_param, :tax_withholding => valid_attributes}
          assigns(:tax_withholding).should eq(tax_withholding)
        end

        it "redirects to the tax_withholding" do
          tax_withholding = TaxWithholding.create! valid_attributes
          put :update, {:id => tax_withholding.to_param, :tax_withholding => {:leave_address => "another address"}}
          response.should redirect_to "#{tax_withholdings_path}/#{tax_withholding.date/year}/#{tax_withholding.date.month}"
        end
      end

      describe "with invalid params" do
        it "assigns the tax_withholding as @tax_withholding" do
          tax_withholding = TaxWithholding.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          TaxWithholding.any_instance.stub(:save).and_return(false)
          put :update, {:id => tax_withholding.to_param, :tax_withholding => {}}
          assigns(:tax_withholding).should eq(tax_withholding)
        end

        it "re-renders the 'edit' template" do
          tax_withholding = TaxWithholding.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          TaxWithholding.any_instance.stub(:save).and_return(false)
          put :update, {:id => tax_withholding.to_param, :tax_withholding => {}}
          response.should render_template("edit")
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested tax_withholding" do
        tax_withholding = TaxWithholding.create! valid_attributes
        expect {
          delete :destroy, {:id => tax_withholding.to_param}
        }.to change(TaxWithholding, :count).by(-1)
        TaxWithholding.last.deleted_at.should_not nil
      end

      it "redirects to the tax_withholdings list" do
        tax_withholding = TaxWithholding.create! valid_attributes
        delete :destroy, {:id => tax_withholding.to_param}
        response.should redirect_to tax_withholdings_path
      end
    end
  end

  context "unauthenticated user" do
    describe "GET index" do
      it "redirects to signin" do
        get :index, {}
        response.should redirect_to "/users/sign_in"
      end
    end

    describe "GET show" do
      it "redirect to signin" do
        tax_withholding = TaxWithholding.create! valid_attributes
        get :show, {:id => tax_withholding.to_param}
        response.should redirect_to "/users/sign_in"
      end
    end

    describe "GET new" do
      it "redirect to signin" do
        get :new, {}
        response.should redirect_to "/users/sign_in"
      end
    end

    describe "GET edit" do
      it "redirect to signin" do
        tax_withholding = TaxWithholding.create! valid_attributes
        get :edit, {:id => tax_withholding.to_param}
        response.should redirect_to "/users/sign_in"
      end
    end

    describe "POST create" do
      it "redirect to signin" do
        expect {
          post :create, {:tax_withholding => valid_attributes}
        }.to change(TaxWithholding, :count).by(0)
        response.should redirect_to "/users/sign_in"
      end
    end

    describe "PUT update" do
      it "redirect to signin" do
        # tax_withholding = FactoryGirl.build(:tax_withholding)
        # put :update, {:id => tax_withholding.to_param, :tax_withholding => {'these' => 'params'}}
        put :update, {:id => 1, :tax_withholding => {'these' => 'params'}}
        response.should redirect_to "/users/sign_in"
      end
    end

    describe "DELETE destroy" do
      it "redirects to signin" do
        # tax_withholding = FactoryGirl.build(:tax_withholding)
        # delete :destroy, {:id => tax_withholding.to_param}
        delete :destroy, {:id => 1}
        response.should redirect_to "/users/sign_in"
      end
    end
  end
end
