require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe DocumentsController do

  # This should return the minimal set of attributes required to create a valid
  # Report. As you add validations to Report, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    if controller.current_user
      car = controller.current_user.cars.last
      driver = controller.current_user.drivers.last
      FactoryGirl.attributes_for(:report, :car_id => car.id, :driver_id => driver.id)
    else
      FactoryGirl.attributes_for(:report, :car_id => 100, :driver_id => 100)
    end
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ReportsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  context "authenticated user" do
    signin_user

    describe "GET index" do
      it "assigns the requested report as @report without params" do
        driver = FactoryGirl.create(:driver_with_report)
        year = Date.today.year
        month = Date.today.month

        get :index, {:driver_id => driver.id}
        reports = Report.where(["driver_id = ? AND started_at BETWEEN ? AND ?", driver.id, Date.new(year, month, 1), Date.new(year, month, -1)]).all
        assigns(:reports).should eq(reports)
      end

      it "assigns the requested report as @report with params" do
        driver = FactoryGirl.create(:driver_with_report)
        year = Date.today.year
        month = Date.today.month

        get :index, {:driver_id => driver.id}
        reports = Report.where(["driver_id = ? AND started_at BETWEEN ? AND ?", driver.id, Date.new(year, month, 1), Date.new(year, month, -1)]).all
        assigns(:reports).should eq(reports)
      end

      it "redirects to index in case of unauthorized report as @report" do
        car = FactoryGirl.create(:car, :user_id => controller.current_user.id + 1)
        driver = FactoryGirl.create(:driver, :user_id => controller.current_user.id + 1)
        report = FactoryGirl.create(:report, :car_id => car.id, :driver_id => driver.id)
        get :index, {:report_id => report.to_param, :driver_id => driver.id}
        response.should redirect_to reports_path
      end
    end
  end

  context "unauthenticated user" do
    describe "GET index" do
      it "redirects to signin" do
        get :index, {}
        response.should redirect_to new_user_session_path
      end
    end
  end
end
