require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UsersController do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    if controller.current_user
      FactoryGirl.attributes_for(:user, :id => controller.current_user.id)
    else
      FactoryGirl.attributes_for(:user, :id => 100)
    end
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  context "authenticated user" do
    signin_user

    describe "GET index" do
      it "assigns current user as @user" do
        user = controller.current_user
        get :index, {}
        assigns(:users).should eq(user)
      end

      it "do not assigns other's users" do
        user = FactoryGirl.create(:user, :id => controller.current_user.id + 1)
        assigns(:users).should_not eq([user])
      end
    end

    describe "GET show" do
      it "assigns the requested user as @user" do
        user = User.create! valid_attributes
        get :show, {:id => user.to_param}
        assigns(:user).should eq(user)
      end

      it "redirects to index in case of unauthorized user as @user" do
        user = FactoryGirl.create(:user, :id => controller.current_user.id + 1)
        get :show, {:id => user.to_param}
        response.should redirect_to root_path
      end
    end

    # describe "GET new" do
    #   it "assigns a new user as @user" do
    #     get :new, {}
    #     assigns(:user).should be_a_new(User)
    #   end
    # end

    describe "GET edit" do
      it "assigns the requested user as @user" do
        user = User.create! valid_attributes
        get :edit, {:id => user.to_param}
        assigns(:user).should eq(user)
      end

      it "do not assigns the requested other's user as @user" do
        user = FactoryGirl.create(:user, :id => controller.current_user.id + 1)
        get :edit, {:id => user.to_param}
        response.should redirect_to root_path
      end
    end

    # describe "POST create" do
    #   describe "with valid params" do
    #     it "creates a new User" do
    #       expect {
    #         post :create, {:user => valid_attributes}
    #       }.to change(User, :count).by(1)
    #     end

    #     it "assigns a newly created user as @user" do
    #       post :create, {:user => valid_attributes}
    #       assigns(:user).should be_a(User)
    #       assigns(:user).should be_persisted
    #     end

    #     it "redirects to the user index" do
    #       post :create, {:user => valid_attributes}
    #       response.should redirect_to(root_path)
    #     end
    #   end

    #   describe "with invalid params" do
    #     it "assigns a newly created but unsaved user as @user" do
    #       # Trigger the behavior that occurs when invalid params are submitted
    #       User.any_instance.stub(:save).and_return(false)
    #       post :create, {:user => {}}
    #       assigns(:user).should be_a_new(User)
    #     end

    #     it "re-renders the 'new' template" do
    #       # Trigger the behavior that occurs when invalid params are submitted
    #       User.any_instance.stub(:save).and_return(false)
    #       post :create, {:user => {}}
    #       response.should render_template("new")
    #     end
    #   end
    # end

    describe "PUT update" do
      describe "for unauthorized user" do
        it "redirects to index for unauthorized user as @user" do
          user = FactoryGirl.create(:user, :id => controller.current_user.id + 1)
          put :update, {:id => user.to_param, :user => valid_attributes}
          response.should redirect_to(root_path)
        end
      end

      describe "with valid params" do
        it "updates the requested user" do
          user = User.create! valid_attributes
          # Assuming there are no other users in the database, this
          # specifies that the User created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          User.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
          put :update, {:id => user.to_param, :user => {'these' => 'params'}}
        end

        it "assigns the requested user as @user" do
          user = User.create! valid_attributes
          put :update, {:id => user.to_param, :user => valid_attributes}
          assigns(:user).should eq(user)
        end

        it "redirects to the user" do
          user = User.create! valid_attributes
          put :update, {:id => user.to_param, :user => valid_attributes}
          response.should redirect_to(user)
        end
      end

      describe "with invalid params" do
        it "assigns the user as @user" do
          user = User.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          User.any_instance.stub(:save).and_return(false)
          put :update, {:id => user.to_param, :user => {}}
          assigns(:user).should eq(user)
        end

        it "re-renders the 'edit' template" do
          user = User.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          User.any_instance.stub(:save).and_return(false)
          put :update, {:id => user.to_param, :user => {}}
          response.should render_template("edit")
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested user" do
        user = User.create! valid_attributes
        expect {
          delete :destroy, {:id => user.to_param}
        }.to change(User, :count).by(0)
        User.last.deleted_at.should_not nil
      end

      it "does not destroy other's user" do
        user = FactoryGirl.create(:user, :id => controller.current_user.id + 1)
        expect {
          delete :destroy, {:id => user.to_param}
        }.to change(User, :count).by(0)
        response.should redirect_to root_path
      end

      it "redirects to the users list" do
        user = User.create! valid_attributes
        delete :destroy, {:id => user.to_param}
        response.should redirect_to(root_path)
      end
    end
  end

  context "unauthenticated use" do
    describe "GET index" do
      it "redirects to signin" do
        get :index, {}
        response.should redirect_to "/users/sign_in"
      end
    end

    describe "GET show" do
      it "redirect to signin" do
        user = User.create! valid_attributes
        get :show, {:id => user.to_param}
        response.should redirect_to "/users/sign_in"
      end
    end

    # describe "GET new" do
    #   it "redirect to signin" do
    #     get :new, {}
    #     response.should redirect_to "/users/sign_in"
    #   end
    # end

    describe "GET edit" do
      it "redirect to signin" do
        user = User.create! valid_attributes
        get :edit, {:id => user.to_param}
        response.should redirect_to "/users/sign_in"
      end
    end

    # describe "POST create" do
    #   it "redirect to signin" do
    #     expect {
    #       post :create, {:user => valid_attributes}
    #     }.to change(User, :count).by(0)
    #     response.should redirect_to "/users/sign_in"
    #   end
    # end

    describe "PUT update" do
      it "redirect to signin" do
        # user = FactoryGirl.build(:user)
        # put :update, {:id => user.to_param, :user => {'these' => 'params'}}
        put :update, {:id => 1, :user => {'these' => 'params'}}
        response.should redirect_to "/users/sign_in"
      end
    end

    describe "DELETE destroy" do
      it "redirects to signin" do
        # user = FactoryGirl.build(:user)
        # delete :destroy, {:id => user.to_param}
        delete :destroy, {:id => 1}
        response.should redirect_to "/users/sign_in"
      end
    end
  end
end
