require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe PickupLocationsController do

  # This should return the minimal set of attributes required to create a valid
  # PickupLocation. As you add validations to PickupLocation, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    if controller.current_user
      FactoryGirl.attributes_for(:pickup_location, :user_id => controller.current_user.id)
    else
      FactoryGirl.attributes_for(:pickup_location, :user_id => 100)
    end
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PickupLocationsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  context "authenticated user" do
    signin_user

    describe "GET index" do
      it "assigns all pickup_locations as @pickup_locations" do
        pickup_location = FactoryGirl.create(:pickup_location, user: controller.current_user)
        get :index, {}, valid_session
        assigns(:pickup_locations).should eq([pickup_location])
      end
    end

    describe "GET show" do
      it "assigns the requested pickup_location as @pickup_location" do
        pickup_location = FactoryGirl.create(:pickup_location, user: controller.current_user)
        get :show, {:id => pickup_location.to_param}, valid_session
        assigns(:pickup_location).should eq(pickup_location)
      end
    end

    describe "GET new" do
      it "assigns a new pickup_location as @pickup_location" do
        get :new, {}, valid_session
        assigns(:pickup_location).should be_a_new(PickupLocation)
      end
    end

    describe "GET edit" do
      it "assigns the requested pickup_location as @pickup_location" do
        pickup_location = FactoryGirl.create(:pickup_location, user: controller.current_user)
        get :edit, {:id => pickup_location.to_param}, valid_session
        assigns(:pickup_location).should eq(pickup_location)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new PickupLocation" do
          expect {
            post :create, {:pickup_location => valid_attributes}, valid_session
          }.to change(PickupLocation, :count).by(1)
        end

        it "assigns a newly created pickup_location as @pickup_location" do
          post :create, {:pickup_location => valid_attributes}, valid_session
          assigns(:pickup_location).should be_a(PickupLocation)
          assigns(:pickup_location).should be_persisted
        end

        it "redirects to the created pickup_location" do
          post :create, {:pickup_location => valid_attributes}, valid_session
          response.should redirect_to pickup_locations_path
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved pickup_location as @pickup_location" do
          # Trigger the behavior that occurs when invalid params are submitted
          PickupLocation.any_instance.stub(:save).and_return(false)
          post :create, {:pickup_location => { "user" => "invalid value" }}, valid_session
          assigns(:pickup_location).should be_a_new(PickupLocation)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          PickupLocation.any_instance.stub(:save).and_return(false)
          post :create, {:pickup_location => { "user" => "invalid value" }}, valid_session
          response.should render_template("new")
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        it "updates the requested pickup_location" do
          pickup_location = FactoryGirl.create(:pickup_location, user: controller.current_user)
          # Assuming there are no other pickup_locations in the database, this
          # specifies that the PickupLocation created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          PickupLocation.any_instance.should_receive(:update_attributes).with({ "user" => "" })
          put :update, {:id => pickup_location.to_param, :pickup_location => { "user" => "" }}, valid_session
        end

        it "assigns the requested pickup_location as @pickup_location" do
          pickup_location = FactoryGirl.create(:pickup_location, user: controller.current_user)
          put :update, {:id => pickup_location.to_param, :pickup_location => valid_attributes}, valid_session
          assigns(:pickup_location).should eq(pickup_location)
        end

        it "redirects to the pickup_location" do
          pickup_location = FactoryGirl.create(:pickup_location, user: controller.current_user)
          put :update, {:id => pickup_location.to_param, :pickup_location => valid_attributes}, valid_session
          response.should redirect_to(pickup_location)
        end
      end

      describe "with invalid params" do
        it "assigns the pickup_location as @pickup_location" do
        pickup_location = FactoryGirl.create(:pickup_location, user: controller.current_user)
          # Trigger the behavior that occurs when invalid params are submitted
          PickupLocation.any_instance.stub(:save).and_return(false)
          put :update, {:id => pickup_location.to_param, :pickup_location => { "user" => "invalid value" }}, valid_session
          assigns(:pickup_location).should eq(pickup_location)
        end

        it "re-renders the 'edit' template" do
        pickup_location = FactoryGirl.create(:pickup_location, user: controller.current_user)
          # Trigger the behavior that occurs when invalid params are submitted
          PickupLocation.any_instance.stub(:save).and_return(false)
          put :update, {:id => pickup_location.to_param, :pickup_location => { "user" => "invalid value" }}, valid_session
          response.should render_template("edit")
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested pickup_location" do
        pickup_location = FactoryGirl.create(:pickup_location, user: controller.current_user)
        expect {
          delete :destroy, {:id => pickup_location.to_param}, valid_session
        }.to change(PickupLocation, :count).by(-1)
      end

      it "redirects to the pickup_locations list" do
        pickup_location = FactoryGirl.create(:pickup_location, user: controller.current_user)
        delete :destroy, {:id => pickup_location.to_param}, valid_session
        response.should redirect_to(pickup_locations_url)
      end
    end
  end

  context "unauthenticated user" do
    describe "GET index" do
      it "redirects to signin" do
        get :index, {}
        response.should redirect_to "/users/sign_in"
      end
    end

    describe "GET show" do
      it "redirect to signin" do
        pickup_location = FactoryGirl.create(:pickup_location)
        get :show, {:id => pickup_location.to_param}
        response.should redirect_to "/users/sign_in"
      end
    end

    describe "GET new" do
      it "redirect to signin" do
        get :new, {}
        response.should redirect_to "/users/sign_in"
      end
    end

    describe "GET edit" do
      it "redirect to signin" do
        pickup_location = FactoryGirl.create(:pickup_location)
        get :edit, {:id => pickup_location.to_param}
        response.should redirect_to "/users/sign_in"
      end
    end

    describe "POST create" do
      it "redirect to signin" do
        expect {
          post :create, {:pickup_location => valid_attributes}
        }.to change(PickupLocation, :count).by(0)
        response.should redirect_to "/users/sign_in"
      end
    end

    describe "PUT update" do
      it "redirect to signin" do
        # pickup_location = FactoryGirl.build(:pickup_location)
        # put :update, {:id => pickup_location.to_param, :pickup_location => {'these' => 'params'}}
        put :update, {:id => 1, :pickup_location => {'these' => 'params'}}
        response.should redirect_to "/users/sign_in"
      end
    end

    describe "DELETE destroy" do
      it "redirects to signin" do
        # pickup_location = FactoryGirl.build(:pickup_location)
        # delete :destroy, {:id => pickup_location.to_param}
        delete :destroy, {:id => 1}
        response.should redirect_to "/users/sign_in"
      end
    end
  end
end
